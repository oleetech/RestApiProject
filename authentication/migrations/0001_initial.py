# Generated by Django 5.0.6 on 2024-10-22 14:59

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the official name of the company (must not contain numbers).', max_length=255, unique=True, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.RegexValidator(message='Company name must not contain numbers.', regex='^[^\\d]*$')], verbose_name='Company Name')),
                ('address', models.CharField(blank=True, help_text='Enter the full address of the company.', max_length=255, null=True, verbose_name='Company Address')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the company is currently active.', verbose_name='Is Active?')),
                ('employee_limit', models.IntegerField(default=10, help_text='Maximum number of employees allowed in this company.', verbose_name='Employee Limit')),
                ('logo', models.ImageField(blank=True, help_text="Upload the company's official logo.", null=True, upload_to='uploads/company_logos/', verbose_name='Company Logo')),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
                'db_table': 'company',
                'ordering': ['-name'],
                'permissions': [('can_view_employee_data', 'Can view employee data'), ('can_manage_subscription', 'Can manage company subscription')],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('mobileNo', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message="Mobile number must be in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('is_company_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employees', to='authentication.company')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Free', 'Free'), ('Standard', 'Standard'), ('Premium', 'Premium'), ('Enterprise', 'Enterprise')], default='Free', help_text='Choose the subscription package.', max_length=50, verbose_name='Subscription Plan')),
                ('price', models.DecimalField(decimal_places=2, help_text='Enter the price of the subscription.', max_digits=8, verbose_name='Price')),
                ('max_employees', models.IntegerField(default=10, help_text='Specify the maximum number of employees allowed for this subscription.', verbose_name='Maximum Employees')),
                ('max_storage', models.IntegerField(default=10, help_text='Specify the maximum storage limit in units (e.g., MB or GB).', verbose_name='Maximum Storage')),
                ('advanced_features', models.BooleanField(default=False, help_text='Indicates whether the subscription includes advanced features.', verbose_name='Access to Advanced Features')),
                ('user_limit', models.PositiveIntegerField(default=0, help_text='Specify the maximum number of users for this subscription.', verbose_name='User Limit')),
                ('device_limit', models.PositiveIntegerField(default=0, help_text='Specify the maximum number of devices that can be connected.', verbose_name='Device Limit')),
                ('attendance_record_limit', models.BooleanField(default=False, help_text='Indicates if there is a limit on attendance records.', verbose_name='Attendance Record Limit')),
                ('leave_request_limit', models.BooleanField(default=False, help_text='Indicates if there is a limit on leave requests.', verbose_name='Leave Request Limit')),
                ('overtime_hours_limit', models.BooleanField(default=False, help_text='Indicates if there is a limit on overtime hours tracked.', verbose_name='Overtime Hours Limit')),
                ('payroll_cycle_limit', models.BooleanField(default=False, help_text='Indicates if there is a limit on payroll cycles per month.', verbose_name='Payroll Cycle Limit')),
                ('report_generation_limit', models.BooleanField(default=False, help_text='Indicates if there is a limit on the number of reports that can be generated.', verbose_name='Report Generation Limit')),
            ],
            options={
                'verbose_name': 'Subscription',
                'verbose_name_plural': 'Subscriptions',
                'unique_together': {('name', 'price')},
            },
        ),
        migrations.AddField(
            model_name='company',
            name='subscription',
            field=models.ForeignKey(help_text='Select the subscription plan for the company.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='authentication.subscription', verbose_name='Subscription Plan'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['name'], name='company_name_b922ad_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['is_active'], name='company_is_acti_997df1_idx'),
        ),
        migrations.AddConstraint(
            model_name='company',
            constraint=models.UniqueConstraint(fields=('name', 'address'), name='unique_company_name_address'),
        ),
        migrations.AddConstraint(
            model_name='company',
            constraint=models.CheckConstraint(check=models.Q(('employee_limit__gt', 0)), name='check_employee_limit_positive'),
        ),
    ]
